/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&kp ESC>;
            key-positions = <3 4>;
        };

        new_combo {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
  &none   &kp Q   &kp W           &kp E         &kp R        &kp T                                                     &kp Y              &kp U                &kp I    &kp O  &kp SLASH   &none
  &none   &kp A   &kp S     &mt LCTRL D  &mt LSHIFT F        &kp G                                                     &kp H  &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K    &kp L   &kp SEMI   &none
  &none   &kp Z   &kp X  &mt LEFT_GUI C    &mt LALT V        &kp B      &none   &none   &none          &none           &kp N         &mt LALT M   &mt LEFT_GUI COMMA  &kp DOT      &kp P   &none
                                  &none         &none  &lt 2 SPACE  &lt 3 TAB   &none   &none  &kp BACKSPACE  &lt 1 KP_ENTER              &none                &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numbers {
            bindings = <
 &trans  &kp GRAVE  &trans  &trans  &trans  &trans                                        &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp STAR  &trans
 &trans     &trans  &trans  &trans  &trans  &trans                                        &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL  &trans
 &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &trans
                            &trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans
            >;
        };

        NAV {
            bindings = <
 &trans                &trans         &kp C_PREV            &kp C_MUTE      &kp C_NEXT  &trans                                      &kp PRINTSCREEN    &kp PAGE_DOWN                &kp END           &kp HOME        &kp PG_UP  &trans
 &trans                &trans  &kp C_VOLUME_DOWN      &kp C_PLAY_PAUSE    &kp C_VOL_UP  &trans                                          &kp AT_SIGN   &kp LEFT_ARROW         &kp DOWN_ARROW       &kp UP_ARROW  &kp RIGHT_ARROW  &trans
 &trans  &kp NON_US_BACKSLASH   &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &trans  &trans  &trans  &trans      &trans           &trans  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp NON_US_HASH  &trans
                                                                &trans          &trans  &trans  &trans  &trans  &trans  &kp DELETE           &trans           &trans                 &trans
            >;
        };

        FUNCTION {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans                                  &kp PRINTSCREEN  &kp F9  &kp F10  &kp F11  &kp F12  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                      &kp AT_SIGN  &kp F5   &kp F6   &kp F7   &kp F8  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &kp F1   &kp F2   &kp F3   &kp F4  &trans
                         &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans   &trans
            >;
        };
    };
};
