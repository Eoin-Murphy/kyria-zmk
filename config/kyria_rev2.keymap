/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
};

/ {
    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E              &kp R        &kp T                                              &kp Y            &kp U         &kp I           &kp O    &kp SLASH  &none
&none  &kp A  &kp S  &mt LCTRL D        &mt LSHFT F  &kp G                                              &kp H            &mt RSHIFT J  &mt RCTRL K     &kp L    &kp SEMI   &none
&none  &kp Z  &kp X  &mt LGUI C         &mt LALT V   &kp B      &none        &none  &none  &none        &kp N            &mt RALT M    &mt RGUI COMMA  &kp DOT  &kp P      &none
                     &lt 4 PRINTSCREEN  &none        &lt 3 TAB  &lt 2 SPACE  &none  &none  &lt 4 ENTER  &lt 1 BACKSPACE  &none         &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        layer_1 {
            bindings = <
&trans  &trans  &none   &none       &none      &trans                                  &trans  &kp N7  &kp N8  &kp N9  &kp BACKSLASH  &trans
&trans  &trans  &none   &kp ESCAPE  &none      &trans                                  &trans  &kp N4  &kp N5  &kp N6  &kp EQUAL      &trans
&trans  &trans  &trans  &kp ESCAPE  &kp TILDE  &trans  &trans  &trans  &trans  &trans  &kp N0  &kp N1  &kp N2  &kp N3  &kp MINUS      &trans
                        &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans      &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans      &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &kp F1  &kp F2   &kp F3   &kp F4   &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp DELETE  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans    &kp C_PREV        &kp C_MUTE            &kp C_NEXT       &trans                                  &trans      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES      &kp GRAVE          &trans     &trans
&trans  &trans    &kp C_VOL_DN      &kp C_PLAY_PAUSE      &kp C_VOLUME_UP  &trans                                  &trans      &kp LEFT          &kp DOWN               &kp UP             &kp RIGHT  &trans
&trans  &kp PIPE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE   &trans  &trans  &trans  &trans  &trans  &trans      &kp RIGHT_BRACE   &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp HASH   &trans
                                    &trans                &trans           &trans  &trans  &trans  &trans  &trans  &kp DELETE  &trans            &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &bt BT_CLR  &bt BT_NXT  &trans  &trans  &trans                                  &trans  &trans  &trans  &bt BT_NXT  &bt BT_CLR  &trans
&trans  &trans      &trans      &trans  &trans  &trans                                  &trans  &trans  &trans  &trans      &trans      &trans
&trans  &trans      &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans
                                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
